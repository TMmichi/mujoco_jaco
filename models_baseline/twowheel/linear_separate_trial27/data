{
    "composite_primitive_name": null,
    "learning_rate": {
        ":type:": "<class 'function'>",
        ":serialized:": "gASVmQIAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX2ZpbGxfZnVuY3Rpb26Uk5QoaACMD19tYWtlX3NrZWxfZnVuY5STlGgAjA1fYnVpbHRpbl90eXBllJOUjAhDb2RlVHlwZZSFlFKUKEsBSwBLAUsBSxNDBIgAUwCUToWUKYwBX5SFlIxuL1VzZXJzL2plb25naG9vbi9Hb29nbGVfZHJpdmUvV29ya3NwYWNlL01MQ1MvbXVqb2NvX2phY28vc3RhYmxlX2Jhc2VsaW5lcy9zdGFibGVfYmFzZWxpbmVzL2NvbW1vbi9zY2hlZHVsZXMucHmUjARmdW5jlEuKQwIAAZSMA3ZhbJSFlCl0lFKUSwF9lCiMC19fcGFja2FnZV9flIwXc3RhYmxlX2Jhc2VsaW5lcy5jb21tb26UjAhfX25hbWVfX5SMIXN0YWJsZV9iYXNlbGluZXMuY29tbW9uLnNjaGVkdWxlc5SMCF9fZmlsZV9flIxuL1VzZXJzL2plb25naG9vbi9Hb29nbGVfZHJpdmUvV29ya3NwYWNlL01MQ1MvbXVqb2NvX2phY28vc3RhYmxlX2Jhc2VsaW5lcy9zdGFibGVfYmFzZWxpbmVzL2NvbW1vbi9zY2hlZHVsZXMucHmUdYeUUpR9lCiMB2dsb2JhbHOUfZSMCGRlZmF1bHRzlE6MBGRpY3SUfZSMDmNsb3N1cmVfdmFsdWVzlF2URz8aNuLrHEMtYYwGbW9kdWxllGgZjARuYW1llGgPjANkb2OUTowXX2Nsb3VkcGlja2xlX3N1Ym1vZHVsZXOUXZSMCHF1YWxuYW1llIwVY29uc3Rmbi48bG9jYWxzPi5mdW5jlIwKa3dkZWZhdWx0c5ROdXRSLg=="
    },
    "buffer_size": 50000,
    "learning_starts": 25,
    "train_freq": 1,
    "batch_size": 64,
    "tau": 0.005,
    "ent_coef": "auto",
    "target_entropy": {
        ":type:": "<class 'numpy.float32'>",
        ":serialized:": "gASVZwAAAAAAAACMFW51bXB5LmNvcmUubXVsdGlhcnJheZSMBnNjYWxhcpSTlIwFbnVtcHmUjAVkdHlwZZSTlIwCZjSUSwBLAYeUUpQoSwOMATyUTk5OSv////9K/////0sAdJRiQwQAAIC/lIaUUpQu"
    },
    "gamma": 0.99,
    "verbose": 1,
    "observation_space": {
        ":type:": "<class 'gym.spaces.box.Box'>",
        ":serialized:": "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",
        "dtype": "float32",
        "shape": [
            8
        ],
        "low": "[      -inf       -inf -5.        -5.        -3.1415927 -5.\n -5.        -3.1415927]",
        "high": "[      inf       inf 5.        5.        3.1415927 5.        5.\n 3.1415927]",
        "bounded_below": "[False False  True  True  True  True  True  True]",
        "bounded_above": "[False False  True  True  True  True  True  True]",
        "np_random": "RandomState(MT19937)"
    },
    "action_space": {
        ":type:": "<class 'gym.spaces.box.Box'>",
        ":serialized:": "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",
        "dtype": "float32",
        "shape": [
            1
        ],
        "low": "[-1.]",
        "high": "[1.]",
        "bounded_below": "[ True]",
        "bounded_above": "[ True]",
        "np_random": "RandomState(MT19937)"
    },
    "primitives": {},
    "tails": [],
    "policy": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gASVNQAAAAAAAACMI3N0YWJsZV9iYXNlbGluZXMuc2FjX211bHRpLnBvbGljaWVzlIwJTWxwUG9saWN5lJOULg==",
        "__module__": "stable_baselines.sac_multi.policies",
        "__doc__": "\n    Policy object that implements actor critic, using a MLP (2 layers of 64)\n\n    :param sess: (TensorFlow session) The current TensorFlow session\n    :param ob_space: (Gym Space) The observation space of the environment\n    :param ac_space: (Gym Space) The action space of the environment\n    :param n_env: (int) The number of environments to run\n    :param n_steps: (int) The number of steps to run for each environment\n    :param n_batch: (int) The number of batch to run (n_envs * n_steps)\n    :param reuse: (bool) If the policy is reusable or not\n    :param _kwargs: (dict) Extra keyword arguments for the nature CNN feature extraction\n    ",
        "__init__": "<function MlpPolicy.__init__ at 0x7f85de95c9d8>",
        "__abstractmethods__": "frozenset()",
        "_abc_registry": "<_weakrefset.WeakSet object at 0x7f85de94dd30>",
        "_abc_cache": "<_weakrefset.WeakSet object at 0x7f85de94dd68>",
        "_abc_negative_cache": "<_weakrefset.WeakSet object at 0x7f85de94dda0>",
        "_abc_negative_cache_version": 52
    },
    "n_envs": 1,
    "n_cpu_tf_sess": null,
    "seed": null,
    "action_noise": null,
    "random_exploration": 0.0,
    "_vectorize_action": false,
    "policy_kwargs": {},
    "n_sampled_goal": 4,
    "goal_selection_strategy": {
        ":type:": "<enum 'GoalSelectionStrategy'>",
        ":serialized:": "gASVRgAAAAAAAACMInN0YWJsZV9iYXNlbGluZXMuaGVyLnJlcGxheV9idWZmZXKUjBVHb2FsU2VsZWN0aW9uU3RyYXRlZ3mUk5RLAIWUUpQu",
        "_value_": 0,
        "_name_": "FUTURE",
        "__objclass__": "<enum 'GoalSelectionStrategy'>"
    },
    "model_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gASVNgAAAAAAAACMJHN0YWJsZV9iYXNlbGluZXMuc2FjX211bHRpLnNhY19tdWx0aZSMCVNBQ19NVUxUSZSTlC4=",
        "__module__": "stable_baselines.sac_multi.sac_multi",
        "__doc__": "\n    Soft Actor-Critic (SAC)\n    Off-Policy Maximum Entropy Deep Reinforcement Learning with a Stochastic Actor,\n    This implementation borrows code from original implementation (https://github.com/haarnoja/sac)\n    from OpenAI Spinning Up (https://github.com/openai/spinningup) and from the Softlearning repo\n    (https://github.com/rail-berkeley/softlearning/)\n    Paper: https://arxiv.org/abs/1801.01290\n    Introduction to SAC: https://spinningup.openai.com/en/latest/algorithms/sac.html\n\n    :param policy: (SACPolicy or str) The policy model to use (MlpPolicy, CnnPolicy, LnMlpPolicy, ...)\n    :param env: (Gym environment or str) The environment to learn from (if registered in Gym, can be str)\n    :param gamma: (float) the discount factor\n    :param learning_rate: (float or callable) learning rate for adam optimizer,\n        the same learning rate will be used for all networks (Q-Values, Actor and Value function)\n        it can be a function of the current progress (from 1 to 0)\n    :param buffer_size: (int) size of the replay buffer\n    :param batch_size: (int) Minibatch size for each gradient update\n    :param tau: (float) the soft update coefficient (\"polyak update\", between 0 and 1)\n    :param ent_coef: (str or float) Entropy regularization coefficient. (Equivalent to\n        inverse of reward scale in the original SAC paper.)  Controlling exploration/exploitation trade-off.\n        Set it to 'auto' to learn it automatically (and 'auto_0.1' for using 0.1 as initial value)\n    :param train_freq: (int) Update the model every `train_freq` steps.\n    :param learning_starts: (int) how many steps of the model to collect transitions for before learning starts\n    :param target_update_interval: (int) update the target network every `target_network_update_freq` steps.\n    :param gradient_steps: (int) How many gradient update after each step\n    :param target_entropy: (str or float) target entropy when learning ent_coef (ent_coef = 'auto')\n    :param action_noise: (ActionNoise) the action noise type (None by default), this can help\n        for hard exploration problem. Cf DDPG for the different action noise type.\n    :param random_exploration: (float) Probability of taking a random action (as in an epsilon-greedy strategy)\n        This is not needed for SAC normally but can help exploring when using HER + SAC.\n        This hack was present in the original OpenAI Baselines repo (DDPG + HER)\n    :param verbose: (int) the verbosity level: 0 none, 1 training information, 2 tensorflow debug\n    :param tensorboard_log: (str) the log location for tensorboard (if None, no logging)\n    :param _init_setup_model: (bool) Whether or not to build the network at the creation of the instance\n    :param policy_kwargs: (dict) additional arguments to be passed to the policy on creation\n    :param full_tensorboard_log: (bool) enable additional logging when using tensorboard\n        Note: this has no effect on SAC logging for now\n    :param seed: (int) Seed for the pseudo-random generators (python, numpy, tensorflow).\n        If None (default), use random seed. Note that if you want completely deterministic\n        results, you must set `n_cpu_tf_sess` to 1.\n    :param n_cpu_tf_sess: (int) The number of threads for TensorFlow operations\n        If None, the number of cpu of the current machine will be used.\n    ",
        "__init__": "<function SAC_MULTI.__init__ at 0x7f85deb37488>",
        "_get_pretrain_placeholders": "<function SAC_MULTI._get_pretrain_placeholders at 0x7f85de9556a8>",
        "setup_model": "<function SAC_MULTI.setup_model at 0x7f85de95ce18>",
        "setup_custom_model": "<function SAC_MULTI.setup_custom_model at 0x7f85de95cea0>",
        "_train_step": "<function SAC_MULTI._train_step at 0x7f85de95cf28>",
        "learn": "<function SAC_MULTI.learn at 0x7f85de965048>",
        "action_probability": "<function SAC_MULTI.action_probability at 0x7f85de9650d0>",
        "predict": "<function SAC_MULTI.predict at 0x7f85de965158>",
        "get_weight": "<function SAC_MULTI.get_weight at 0x7f85de9651e0>",
        "get_primitive_action": "<function SAC_MULTI.get_primitive_action at 0x7f85de965268>",
        "get_primitive_log_std": "<function SAC_MULTI.get_primitive_log_std at 0x7f85de9652f0>",
        "get_parameter_list": "<function SAC_MULTI.get_parameter_list at 0x7f85de965378>",
        "save": "<function SAC_MULTI.save at 0x7f85de965400>",
        "__abstractmethods__": "frozenset()",
        "_abc_registry": "<_weakrefset.WeakSet object at 0x7f85de8685f8>",
        "_abc_cache": "<_weakrefset.WeakSet object at 0x7f85de868668>",
        "_abc_negative_cache": "<_weakrefset.WeakSet object at 0x7f85de8686a0>",
        "_abc_negative_cache_version": 52
    },
    "her_obs_space": {
        ":type:": "<class 'gym.spaces.dict.Dict'>",
        ":serialized:": "",
        "spaces": "OrderedDict([('achieved_goal', Box(1,)), ('desired_goal', Box(1,)), ('observation', Box(6,))])",
        "shape": null,
        "dtype": null,
        "np_random": null
    },
    "her_action_space": {
        ":type:": "<class 'gym.spaces.box.Box'>",
        ":serialized:": "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",
        "dtype": "float32",
        "shape": [
            1
        ],
        "low": "[-1.]",
        "high": "[1.]",
        "bounded_below": "[ True]",
        "bounded_above": "[ True]",
        "np_random": "RandomState(MT19937)"
    }
}